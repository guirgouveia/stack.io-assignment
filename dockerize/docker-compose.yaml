# From the official Docker Hub MySQL page - https://hub.docker.com/_/mysql
# Uses root/root as user/password credentials
version: '3.1'

services:

  webserver:
    container_name: stack-io-webserver
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_HOME=/app
        - HTTP_PORT=8080
      tags:
        - "${IMAGE_NAME}:${IMAGE_TAG}"
    image: "${IMAGE_NAME}:${IMAGE_TAG}"
    restart: always
    ports:
      - "$WEBSERVER_HOST_PORT:8080" # Expose port 8081 to the host to avoid port conflicts
    depends_on:
      - mysql
    volumes:
      - stack_io_logs:/var/log/webserver
    
  mysql:
    container_name: stack-io-mysql
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - "$MYSQL_HOST_PORT:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./config/mysql-init.sh:/docker-entrypoint-initdb.d/mysql-init.sh # Grants the stack-io user privileged permissions

  adminer:
    container_name: stack-io-adminer
    image: adminer
    restart: always
    ports:
      - "$ADMINER_HOST_PORT:8080" # Expose port 8082 to the host to avoid port conflicts

volumes:
  stack_io_logs:
    driver: local
    name: stack-io-logs
  mysql_data:
    driver: local
    name: stack-io-mysql-data
  mysql_logs:
    driver: local
    name: stack-io-mysql-logs
    
networks:
  default:
    name: stack-io